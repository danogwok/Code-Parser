
  FuncDef: 
 # ifndef PARSER _ H 

  FuncDef: 
 # define PARSER _ H 

  FuncDef: 
 # include < string > 

  FuncDef: 
 # include < iostream > 

  FuncDef: 
 # include < vector > 

  FuncDef: 
 # include "../SemiExp/itokcollection.h" 

  Declaration: 
 class Parser ; 

  FuncDef: 
 virtual ~ IBuilder ( ) { 

  Function IBuilder, lines = 1 , startLine = 78 , endLine = 78 , complexity = 1

  Declaration: 
 virtual Parser * Build ( ) = 0 ; 

  Executable: 
 virtual Parser * Build ( ) = 0 ; 

  FuncDef: 
 virtual ~ IAction ( ) { 

  Function IAction, lines = 1 , startLine = 89 , endLine = 89 , complexity = 1

  Declaration: 
 virtual void doAction ( ITokCollection * & pTc ) = 0 ; 

  Executable: 
 virtual void doAction ( ITokCollection * & pTc ) = 0 ; 

  FuncDef: 
 virtual ~ IRule ( ) { 

  Function IRule, lines = 1 , startLine = 100 , endLine = 100 , complexity = 1

  Declaration: 
 void addAction ( IAction * pAction ) ; 

  Declaration: 
 void doActions ( ITokCollection * & pTc ) ; 

  Declaration: 
 virtual bool doTest ( ITokCollection * & pTc ) = 0 ; 

  Executable: 
 virtual bool doTest ( ITokCollection * & pTc ) = 0 ; 

  Declaration: 
 std : : vector < IAction * > actions ; 

  Executable: 
 Parser ( ITokCollection * pTokCollection ) ; 

  Declaration: 
 ~ Parser ( ) ; 

  Declaration: 
 void addRule ( IRule * pRule ) ; 

  Declaration: 
 bool parse ( ) ; 

  Declaration: 
 bool next ( ) ; 

  Declaration: 
 ITokCollection * pTokColl ; 

  Declaration: 
 std : : vector < IRule * > rules ; 

  FuncDef: 
 inline Parser : : Parser ( ITokCollection * pTokCollection ) : pTokColl ( pTokCollection ) { 

  Function Parser, lines = 1 , startLine = 121 , endLine = 121 , complexity = 1

  FuncDef: 
 inline Parser : : ~ Parser ( ) { 

  Function Parser, lines = 1 , startLine = 123 , endLine = 123 , complexity = 1

  FuncDef: 
 # endif 
