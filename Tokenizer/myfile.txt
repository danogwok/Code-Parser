called
 -- /////////////////////////////////////////////////////////////////////
 -- newline
 -- // Tokenizer.cpp - read words from a std::stream                   //
 -- newline
 -- // ver 3.2                                                           //
 -- newline
 -- // Language:  C++, Visual Studio 2015                                //
 -- newline
 -- // Application: Parser component, CSE687 - Object Oriented Design    //
 -- newline
 -- // Source:      Jim Fawcett, Syracuse University, CST 4-187          //
 -- newline
 -- //              jfawcett@twcny.rr.com                                //
 -- newline
 -- // Author:		Ronak Bhuptani, SUID#429019830, Syracuse             //
 -- newline
 -- //              University, rmbhupta@syr.edu                         //
 -- newline
 -- ///////////////////////////////////////////////////////////////////////
 -- newline
 -- /*
  Helper code that does not attempt to handle all tokenizing
  special cases like escaped characters.

  * Maintenance History:
  * --------------------
  * ver 3.2 : 28 Jan 2016
  * - added _takeComments variable and get set methods of the same.
  *
*/
 -- newline
 -- #
 -- define
 -- _
 -- CRT
 -- _
 -- SECURE
 -- _
 -- NO
 -- _
 -- DEPRECATE
 -- newline
 -- #
 -- define
 -- NO
 -- _
 -- WARN
 -- _
 -- MBCS
 -- _
 -- MFC
 -- _
 -- DEPRECATION
 -- newline
 -- #
 -- include
 -- Tokenizer.h
 -- newline
 -- #
 -- include
 -- <
 -- iostream
 -- >
 -- newline
 -- #
 -- include
 -- <
 -- cctype
 -- >
 -- newline
 -- #
 -- include
 -- <
 -- string
 -- >
 -- newline
 -- #
 -- include
 -- <
 -- map
 -- >
 -- newline
 -- namespace
 -- Scanner
 -- {
 -- newline
 -- class
 -- ConsumeState
 -- newline
 -- {
 -- newline
 -- public
 -- :
 -- newline
 -- ConsumeState
 -- (
 -- )
 -- ;
 -- newline
 -- virtual
 -- ~
 -- ConsumeState
 -- (
 -- )
 -- ;
 -- newline
 -- ConsumeState
 -- (
 -- const
 -- ConsumeState
 -- &
 -- )
 -- =
 -- delete
 -- ;
 -- newline
 -- ConsumeState
 -- &
 -- operator
 -- =
 -- (
 -- const
 -- ConsumeState
 -- &
 -- )
 -- =
 -- delete
 -- ;
 -- newline
 -- void
 -- attach
 -- (
 -- std
 -- ::
 -- istream
 -- *
 -- pIn
 -- )
 -- {
 -- _
 -- pIn
 -- =
 -- pIn
 -- ;
 -- }
 -- newline
 -- virtual
 -- void
 -- eatChars
 -- (
 -- )
 -- =
 -- 0
 -- ;
 -- newline
 -- void
 -- consumeChars
 -- (
 -- )
 -- {
 -- newline
 -- _
 -- pState
 -- -
 -- >
 -- eatChars
 -- (
 -- )
 -- ;
 -- newline
 -- _
 -- pState
 -- =
 -- nextState
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- bool
 -- canRead
 -- (
 -- )
 -- {
 -- return
 -- _
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- ;
 -- }
 -- newline
 -- std
 -- ::
 -- string
 -- getTok
 -- (
 -- )
 -- {
 -- return
 -- token
 -- ;
 -- }
 -- newline
 -- bool
 -- hasTok
 -- (
 -- )
 -- {
 -- return
 -- token
 -- .
 -- size
 -- (
 -- )
 -- >
 -- 0
 -- ;
 -- }
 -- newline
 -- ConsumeState
 -- *
 -- nextState
 -- (
 -- )
 -- ;
 -- newline
 -- bool
 -- getComments
 -- (
 -- )
 -- {
 -- return
 -- _
 -- takeComments
 -- ;
 -- }
 -- newline
 -- void
 -- setComments
 -- (
 -- bool
 -- value
 -- )
 -- {
 -- _
 -- takeComments
 -- =
 -- value
 -- ;
 -- }
 -- newline
 -- int
 -- isSpecialChar
 -- (
 -- )
 -- ;
 -- newline
 -- protected
 -- :
 -- newline
 -- static
 -- std
 -- ::
 -- string
 -- token
 -- ;
 -- newline
 -- static
 -- std
 -- ::
 -- istream
 -- *
 -- _
 -- pIn
 -- ;
 -- newline
 -- static
 -- int
 -- prevChar
 -- ;
 -- newline
 -- static
 -- int
 -- currChar
 -- ;
 -- newline
 -- static
 -- ConsumeState
 -- *
 -- _
 -- pState
 -- ;
 -- newline
 -- static
 -- ConsumeState
 -- *
 -- _
 -- pEatCppComment
 -- ;
 -- newline
 -- static
 -- ConsumeState
 -- *
 -- _
 -- pEatCComment
 -- ;
 -- newline
 -- static
 -- ConsumeState
 -- *
 -- _
 -- pEatWhitespace
 -- ;
 -- newline
 -- static
 -- ConsumeState
 -- *
 -- _
 -- pEatPunctuator
 -- ;
 -- newline
 -- static
 -- ConsumeState
 -- *
 -- _
 -- pEatAlphanum
 -- ;
 -- newline
 -- static
 -- ConsumeState
 -- *
 -- _
 -- pEatNewline
 -- ;
 -- newline
 -- static
 -- ConsumeState
 -- *
 -- _
 -- pEatSpecialChar
 -- ;
 -- newline
 -- static
 -- ConsumeState
 -- *
 -- _
 -- pEatQuotes
 -- ;
 -- newline
 -- static
 -- bool
 -- _
 -- takeComments
 -- ;
 -- newline
 -- static
 -- std
 -- ::
 -- map
 -- <
 -- std
 -- ::
 -- string
 -- ,
 -- int
 -- >
 -- specialChars
 -- ;
 -- newline
 -- }
 -- ;
 -- newline
 -- }
 -- newline
 -- using
 -- namespace
 -- Scanner
 -- ;
 -- newline
 -- newline
 -- std
 -- ::
 -- string
 -- ConsumeState
 -- ::
 -- token
 -- ;
 -- newline
 -- std
 -- ::
 -- istream
 -- *
 -- ConsumeState
 -- ::
 -- _
 -- pIn
 -- ;
 -- newline
 -- int
 -- ConsumeState
 -- ::
 -- prevChar
 -- ;
 -- newline
 -- int
 -- ConsumeState
 -- ::
 -- currChar
 -- ;
 -- newline
 -- bool
 -- ConsumeState
 -- ::
 -- _
 -- takeComments
 -- =
 -- false
 -- ;
 -- newline
 -- newline
 -- /*-Return[, ], { , }, (, ), <, >, :, ; as single character tokens
* -Return << , >> , +=, -=, *=, /=, ::as two character tokens
*/
 -- newline
 -- newline
 -- newline
 -- std
 -- ::
 -- map
 -- <
 -- std
 -- ::
 -- string
 -- ,
 -- int
 -- >
 -- ConsumeState
 -- ::
 -- specialChars
 -- =
 -- {
 -- {
 -- [
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- ]
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- {
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- }
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- (
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- )
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- <
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- +
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- =
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- -
 -- ,
 -- 1
 -- }
 -- ,
 -- newline
 -- {
 -- >
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- :
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- ;
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- \n
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- <<
 -- ,
 -- 2
 -- }
 -- ,
 -- {
 -- >>
 -- ,
 -- 2
 -- }
 -- ,
 -- {
 -- +=
 -- ,
 -- 2
 -- }
 -- ,
 -- {
 -- ==
 -- ,
 -- 2
 -- }
 -- ,
 -- {
 -- *
 -- ,
 -- 1
 -- }
 -- ,
 -- newline
 -- {
 -- -=
 -- ,
 -- 2
 -- }
 -- ,
 -- {
 -- *=
 -- ,
 -- 2
 -- }
 -- ,
 -- {
 -- /=
 -- ,
 -- 2
 -- }
 -- ,
 -- {
 -- ::
 -- ,
 -- 2
 -- }
 -- ,
 -- {
 -- /
 -- ,
 -- 1
 -- }
 -- ,
 -- {
 -- \n
 -- ,
 -- 2
 -- }
 -- }
 -- ;
 -- newline
 -- ConsumeState
 -- *
 -- ConsumeState
 -- ::
 -- _
 -- pState
 -- =
 -- nullptr
 -- ;
 -- newline
 -- ConsumeState
 -- *
 -- ConsumeState
 -- ::
 -- _
 -- pEatCppComment
 -- =
 -- nullptr
 -- ;
 -- newline
 -- ConsumeState
 -- *
 -- ConsumeState
 -- ::
 -- _
 -- pEatCComment
 -- =
 -- nullptr
 -- ;
 -- newline
 -- ConsumeState
 -- *
 -- ConsumeState
 -- ::
 -- _
 -- pEatWhitespace
 -- =
 -- nullptr
 -- ;
 -- newline
 -- ConsumeState
 -- *
 -- ConsumeState
 -- ::
 -- _
 -- pEatPunctuator
 -- =
 -- nullptr
 -- ;
 -- newline
 -- ConsumeState
 -- *
 -- ConsumeState
 -- ::
 -- _
 -- pEatAlphanum
 -- =
 -- nullptr
 -- ;
 -- newline
 -- ConsumeState
 -- *
 -- ConsumeState
 -- ::
 -- _
 -- pEatQuotes
 -- =
 -- nullptr
 -- ;
 -- newline
 -- ConsumeState
 -- *
 -- ConsumeState
 -- ::
 -- _
 -- pEatSpecialChar
 -- =
 -- nullptr
 -- ;
 -- newline
 -- ConsumeState
 -- *
 -- ConsumeState
 -- ::
 -- _
 -- pEatNewline
 -- ;
 -- newline
 -- newline
 -- void
 -- testLog
 -- (
 -- const
 -- std
 -- ::
 -- string
 -- &
 -- msg
 -- )
 -- ;
 -- newline
 -- newline
 -- int
 -- ConsumeState
 -- ::
 -- isSpecialChar
 -- (
 -- )
 -- {
 -- newline
 -- std
 -- ::
 -- string
 -- tkn
 -- =
 -- ;
 -- newline
 -- tkn
 -- +=
 -- currChar
 -- ;
 -- newline
 -- tkn
 -- +=
 -- _
 -- pIn
 -- -
 -- >
 -- peek
 -- (
 -- )
 -- ;
 -- newline
 -- if
 -- (
 -- specialChars
 -- .
 -- count
 -- (
 -- tkn
 -- )
 -- >
 -- 0
 -- )
 -- // 2 char special characters
 -- newline
 -- return
 -- 2
 -- ;
 -- newline
 -- tkn
 -- =
 -- ;
 -- newline
 -- tkn
 -- +=
 -- currChar
 -- ;
 -- newline
 -- if
 -- (
 -- specialChars
 -- .
 -- count
 -- (
 -- tkn
 -- )
 -- >
 -- 0
 -- )
 -- // 1 char special characters
 -- newline
 -- return
 -- 1
 -- ;
 -- newline
 -- //std::cout << std::endl << tkn << "::" << val << std::endl;
 -- newline
 -- return
 -- 0
 -- ;
 -- newline
 -- }
 -- newline
 -- newline
 -- ConsumeState
 -- *
 -- ConsumeState
 -- ::
 -- nextState
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- if
 -- (
 -- !
 -- (
 -- _
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- )
 -- )
 -- newline
 -- return
 -- nullptr
 -- ;
 -- newline
 -- int
 -- chNext
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- peek
 -- (
 -- )
 -- ;
 -- newline
 -- if
 -- (
 -- chNext
 -- ==
 -- EOF
 -- )
 -- newline
 -- {
 -- newline
 -- _
 -- pIn
 -- -
 -- >
 -- clear
 -- (
 -- )
 -- ;
 -- newline
 -- // if peek() reads end of file character, EOF, then eofbit is set and
 -- newline
 -- // _pIn->good() will return false.  clear() restores state to good
 -- newline
 -- }
 -- newline
 -- if
 -- (
 -- std
 -- ::
 -- isspace
 -- (
 -- currChar
 -- )
 -- &&
 -- currChar
 -- !
 -- =
 -- \n
 -- )
 -- newline
 -- {
 -- newline
 -- testLog
 -- (
 -- state: eatWhitespace
 -- )
 -- ;
 -- newline
 -- return
 -- _
 -- pEatWhitespace
 -- ;
 -- newline
 -- }
 -- newline
 -- if
 -- (
 -- currChar
 -- ==
 -- "
 -- ||
 -- currChar
 -- ==
 -- '
 -- )
 -- newline
 -- {
 -- newline
 -- testLog
 -- (
 -- state: EatQuotes
 -- )
 -- ;
 -- newline
 -- return
 -- _
 -- pEatQuotes
 -- ;
 -- newline
 -- }
 -- newline
 -- if
 -- (
 -- isSpecialChar
 -- (
 -- )
 -- !
 -- =
 -- 0
 -- &&
 -- (
 -- !
 -- (
 -- currChar
 -- ==
 -- /
 -- &&
 -- chNext
 -- ==
 -- /
 -- )
 -- )
 -- &&
 -- (
 -- !
 -- (
 -- currChar
 -- ==
 -- /
 -- &&
 -- chNext
 -- ==
 -- *
 -- )
 -- )
 -- )
 -- newline
 -- {
 -- newline
 -- testLog
 -- (
 -- state: eatSpecialCharacters
 -- )
 -- ;
 -- newline
 -- return
 -- _
 -- pEatSpecialChar
 -- ;
 -- newline
 -- }
 -- newline
 -- if
 -- (
 -- currChar
 -- ==
 -- /
 -- &&
 -- chNext
 -- ==
 -- /
 -- )
 -- newline
 -- {
 -- newline
 -- testLog
 -- (
 -- state: eatCppComment
 -- )
 -- ;
 -- newline
 -- return
 -- _
 -- pEatCppComment
 -- ;
 -- newline
 -- }
 -- newline
 -- if
 -- (
 -- currChar
 -- ==
 -- /
 -- &&
 -- chNext
 -- ==
 -- *
 -- )
 -- newline
 -- {
 -- newline
 -- testLog
 -- (
 -- state: eatCComment
 -- )
 -- ;
 -- newline
 -- return
 -- _
 -- pEatCComment
 -- ;
 -- newline
 -- }
 -- newline
 -- if
 -- (
 -- currChar
 -- ==
 -- \n
 -- )
 -- newline
 -- {
 -- newline
 -- testLog
 -- (
 -- state: eatNewLine
 -- )
 -- ;
 -- newline
 -- return
 -- _
 -- pEatNewline
 -- ;
 -- newline
 -- }
 -- newline
 -- if
 -- (
 -- std
 -- ::
 -- isalnum
 -- (
 -- currChar
 -- )
 -- )
 -- newline
 -- {
 -- newline
 -- testLog
 -- (
 -- state: eatAlphanum
 -- )
 -- ;
 -- newline
 -- return
 -- _
 -- pEatAlphanum
 -- ;
 -- newline
 -- }
 -- newline
 -- if
 -- (
 -- ispunct
 -- (
 -- currChar
 -- )
 -- )
 -- newline
 -- {
 -- newline
 -- testLog
 -- (
 -- state: eatPunctuator
 -- )
 -- ;
 -- newline
 -- return
 -- _
 -- pEatPunctuator
 -- ;
 -- newline
 -- }
 -- newline
 -- if
 -- (
 -- !_
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- )
 -- newline
 -- return
 -- _
 -- pEatWhitespace
 -- ;
 -- newline
 -- throw
 -- (
 -- std
 -- ::
 -- logic
 -- _
 -- error
 -- (
 -- invalid type
 -- )
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- newline
 -- class
 -- EatWhitespace
 -- :
 -- public
 -- ConsumeState
 -- newline
 -- {
 -- newline
 -- public
 -- :
 -- newline
 -- virtual
 -- void
 -- eatChars
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- token
 -- .
 -- clear
 -- (
 -- )
 -- ;
 -- newline
 -- //std::cout << "\n  eating whitespace";
 -- newline
 -- do
 -- {
 -- newline
 -- if
 -- (
 -- !_
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- )
 -- // end of stream
 -- newline
 -- return
 -- ;
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- while
 -- (
 -- std
 -- ::
 -- isspace
 -- (
 -- currChar
 -- )
 -- &&
 -- currChar
 -- !
 -- =
 -- \n
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- }
 -- ;
 -- newline
 -- newline
 -- class
 -- EatCppComment
 -- :
 -- public
 -- ConsumeState
 -- newline
 -- {
 -- newline
 -- public
 -- :
 -- newline
 -- virtual
 -- void
 -- eatChars
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- token
 -- .
 -- clear
 -- (
 -- )
 -- ;
 -- newline
 -- //std::cout << "\n  eating C++ comment";
 -- newline
 -- do
 -- {
 -- newline
 -- token
 -- +=
 -- currChar
 -- ;
 -- newline
 -- if
 -- (
 -- !_
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- )
 -- // end of stream
 -- newline
 -- return
 -- ;
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- while
 -- (
 -- currChar
 -- !
 -- =
 -- \n
 -- )
 -- ;
 -- newline
 -- if
 -- (
 -- !
 -- getComments
 -- (
 -- )
 -- )
 -- newline
 -- token
 -- .
 -- clear
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- }
 -- ;
 -- newline
 -- newline
 -- class
 -- EatCComment
 -- :
 -- public
 -- ConsumeState
 -- newline
 -- {
 -- newline
 -- public
 -- :
 -- newline
 -- virtual
 -- void
 -- eatChars
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- token
 -- .
 -- clear
 -- (
 -- )
 -- ;
 -- newline
 -- //std::cout << "\n  eating C comment";
 -- newline
 -- do
 -- {
 -- newline
 -- token
 -- +=
 -- currChar
 -- ;
 -- newline
 -- if
 -- (
 -- !_
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- )
 -- // end of stream
 -- newline
 -- return
 -- ;
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- while
 -- (
 -- currChar
 -- !
 -- =
 -- *
 -- ||
 -- _
 -- pIn
 -- -
 -- >
 -- peek
 -- (
 -- )
 -- !
 -- =
 -- /
 -- )
 -- ;
 -- newline
 -- token
 -- +=
 -- currChar
 -- ;
 -- newline
 -- token
 -- +=
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- if
 -- (
 -- !
 -- getComments
 -- (
 -- )
 -- )
 -- newline
 -- token
 -- .
 -- clear
 -- (
 -- )
 -- ;
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- }
 -- ;
 -- newline
 -- newline
 -- class
 -- EatPunctuator
 -- :
 -- public
 -- ConsumeState
 -- newline
 -- {
 -- newline
 -- public
 -- :
 -- newline
 -- virtual
 -- void
 -- eatChars
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- token
 -- .
 -- clear
 -- (
 -- )
 -- ;
 -- newline
 -- //std::cout << "\n  eating punctuator";
 -- newline
 -- do
 -- {
 -- newline
 -- token
 -- +=
 -- currChar
 -- ;
 -- newline
 -- if
 -- (
 -- !_
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- )
 -- // end of stream
 -- newline
 -- return
 -- ;
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- while
 -- (
 -- ispunct
 -- (
 -- currChar
 -- )
 -- &&
 -- currChar
 -- !
 -- =
 -- "
 -- &&
 -- currChar
 -- !
 -- =
 -- '
 -- &&
 -- !
 -- isSpecialChar
 -- (
 -- )
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- }
 -- ;
 -- newline
 -- newline
 -- class
 -- EatSpecialChar
 -- :
 -- public
 -- ConsumeState
 -- newline
 -- {
 -- newline
 -- public
 -- :
 -- newline
 -- virtual
 -- void
 -- eatChars
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- token
 -- .
 -- clear
 -- (
 -- )
 -- ;
 -- newline
 -- int
 -- token
 -- _
 -- size
 -- =
 -- isSpecialChar
 -- (
 -- )
 -- ;
 -- newline
 -- if
 -- (
 -- token
 -- _
 -- size
 -- ==
 -- 1
 -- )
 -- newline
 -- token
 -- +=
 -- currChar
 -- ;
 -- newline
 -- else
 -- if
 -- (
 -- token
 -- _
 -- size
 -- ==
 -- 2
 -- )
 -- {
 -- newline
 -- token
 -- +=
 -- currChar
 -- ;
 -- newline
 -- token
 -- +=
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- if
 -- (
 -- _
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- )
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- }
 -- ;
 -- newline
 -- newline
 -- class
 -- EatAlphanum
 -- :
 -- public
 -- ConsumeState
 -- newline
 -- {
 -- newline
 -- public
 -- :
 -- newline
 -- virtual
 -- void
 -- eatChars
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- token
 -- .
 -- clear
 -- (
 -- )
 -- ;
 -- newline
 -- //std::cout << "\n  eating alphanum";
 -- newline
 -- do
 -- {
 -- newline
 -- token
 -- +=
 -- currChar
 -- ;
 -- newline
 -- if
 -- (
 -- !_
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- )
 -- // end of stream
 -- newline
 -- return
 -- ;
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- while
 -- (
 -- isalnum
 -- (
 -- currChar
 -- )
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- }
 -- ;
 -- newline
 -- newline
 -- class
 -- EatNewline
 -- :
 -- public
 -- ConsumeState
 -- newline
 -- {
 -- newline
 -- public
 -- :
 -- newline
 -- virtual
 -- void
 -- eatChars
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- token
 -- .
 -- clear
 -- (
 -- )
 -- ;
 -- newline
 -- //std::cout << "\n  eating alphanum";
 -- newline
 -- token
 -- +=
 -- currChar
 -- ;
 -- newline
 -- if
 -- (
 -- !_
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- )
 -- // end of stream
 -- newline
 -- return
 -- ;
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- }
 -- ;
 -- newline
 -- newline
 -- newline
 -- newline
 -- ConsumeState
 -- ::
 -- ~
 -- ConsumeState
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- static
 -- bool
 -- first
 -- =
 -- true
 -- ;
 -- newline
 -- if
 -- (
 -- first
 -- )
 -- newline
 -- {
 -- newline
 -- first
 -- =
 -- false
 -- ;
 -- newline
 -- delete
 -- _
 -- pEatAlphanum
 -- ;
 -- newline
 -- delete
 -- _
 -- pEatCComment
 -- ;
 -- newline
 -- delete
 -- _
 -- pEatCppComment
 -- ;
 -- newline
 -- delete
 -- _
 -- pEatPunctuator
 -- ;
 -- newline
 -- delete
 -- _
 -- pEatWhitespace
 -- ;
 -- newline
 -- delete
 -- _
 -- pEatNewline
 -- ;
 -- newline
 -- }
 -- newline
 -- }
 -- newline
 -- newline
 -- Toker
 -- ::
 -- Toker
 -- (
 -- )
 -- :
 -- pConsumer
 -- (
 -- new
 -- EatWhitespace
 -- (
 -- )
 -- )
 -- {
 -- }
 -- newline
 -- newline
 -- Toker
 -- ::
 -- ~
 -- Toker
 -- (
 -- )
 -- {
 -- delete
 -- pConsumer
 -- ;
 -- }
 -- newline
 -- newline
 -- bool
 -- Toker
 -- ::
 -- attach
 -- (
 -- std
 -- ::
 -- istream
 -- *
 -- pIn
 -- )
 -- newline
 -- {
 -- newline
 -- if
 -- (
 -- pIn
 -- !
 -- =
 -- nullptr
 -- &&
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- )
 -- newline
 -- {
 -- newline
 -- pConsumer
 -- -
 -- >
 -- attach
 -- (
 -- pIn
 -- )
 -- ;
 -- newline
 -- return
 -- true
 -- ;
 -- newline
 -- }
 -- newline
 -- return
 -- false
 -- ;
 -- newline
 -- }
 -- newline
 -- newline
 -- std
 -- ::
 -- string
 -- Toker
 -- ::
 -- getTok
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- while
 -- (
 -- true
 -- )
 -- newline
 -- {
 -- newline
 -- if
 -- (
 -- !
 -- pConsumer
 -- -
 -- >
 -- canRead
 -- (
 -- )
 -- )
 -- newline
 -- return
 -- ;
 -- newline
 -- pConsumer
 -- -
 -- >
 -- consumeChars
 -- (
 -- )
 -- ;
 -- newline
 -- if
 -- (
 -- pConsumer
 -- -
 -- >
 -- hasTok
 -- (
 -- )
 -- )
 -- newline
 -- break
 -- ;
 -- newline
 -- newline
 -- }
 -- newline
 -- return
 -- pConsumer
 -- -
 -- >
 -- getTok
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- newline
 -- bool
 -- Toker
 -- ::
 -- canRead
 -- (
 -- )
 -- {
 -- return
 -- pConsumer
 -- -
 -- >
 -- canRead
 -- (
 -- )
 -- ;
 -- }
 -- newline
 -- newline
 -- newline
 -- void
 -- Toker
 -- ::
 -- setComments
 -- (
 -- const
 -- std
 -- ::
 -- string
 -- value
 -- )
 -- {
 -- newline
 -- std
 -- ::
 -- cout
 -- <<
 -- called
 -- ;
 -- newline
 -- if
 -- (
 -- value
 -- ==
 -- true
 -- )
 -- newline
 -- pConsumer
 -- -
 -- >
 -- setComments
 -- (
 -- true
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- void
 -- testLog
 -- (
 -- const
 -- std
 -- ::
 -- string
 -- &
 -- msg
 -- )
 -- newline
 -- {
 -- newline
 -- #
 -- ifdef
 -- TEST
 -- _
 -- LOG
 -- newline
 -- std
 -- ::
 -- cout
 -- <<
 -- \n  
 -- <<
 -- msg
 -- ;
 -- newline
 -- #
 -- endif
 -- newline
 -- }
 -- newline
 -- newline
 -- class
 -- EatQuotes
 -- :
 -- public
 -- ConsumeState
 -- newline
 -- {
 -- newline
 -- public
 -- :
 -- newline
 -- virtual
 -- void
 -- eatChars
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- token
 -- .
 -- clear
 -- (
 -- )
 -- ;
 -- newline
 -- int
 -- startChar
 -- ;
 -- newline
 -- bool
 -- escapeChar
 -- =
 -- true
 -- ;
 -- newline
 -- startChar
 -- =
 -- currChar
 -- ;
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- if
 -- (
 -- currChar
 -- ==
 -- startChar
 -- )
 -- {
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- return
 -- ;
 -- newline
 -- }
 -- newline
 -- //std::cout << (char)currChar<<std::endl;
 -- newline
 -- do
 -- {
 -- newline
 -- escapeChar
 -- =
 -- true
 -- ;
 -- newline
 -- if
 -- (
 -- currChar
 -- ==
 -- \
 -- )
 -- newline
 -- eatescapeChars
 -- (
 -- escapeChar
 -- )
 -- ;
 -- newline
 -- if
 -- (
 -- currChar
 -- ==
 -- startChar
 -- &&
 -- escapeChar
 -- )
 -- {
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- return
 -- ;
 -- newline
 -- }
 -- newline
 -- token
 -- +=
 -- currChar
 -- ;
 -- newline
 -- if
 -- (
 -- !_
 -- pIn
 -- -
 -- >
 -- good
 -- (
 -- )
 -- )
 -- // end of stream
 -- newline
 -- return
 -- ;
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- while
 -- (
 -- !
 -- (
 -- currChar
 -- ==
 -- startChar
 -- &&
 -- escapeChar
 -- )
 -- )
 -- ;
 -- newline
 -- //token += currChar;
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- void
 -- eatescapeChars
 -- (
 -- bool
 -- &
 -- escapeChar
 -- )
 -- {
 -- newline
 -- do
 -- {
 -- newline
 -- newline
 -- if
 -- (
 -- !
 -- (
 -- _
 -- pIn
 -- -
 -- >
 -- peek
 -- (
 -- )
 -- ==
 -- "
 -- ||
 -- _
 -- pIn
 -- -
 -- >
 -- peek
 -- (
 -- )
 -- ==
 -- '
 -- )
 -- )
 -- newline
 -- token
 -- +=
 -- currChar
 -- ;
 -- newline
 -- escapeChar
 -- =
 -- !
 -- escapeChar
 -- ;
 -- newline
 -- currChar
 -- =
 -- _
 -- pIn
 -- -
 -- >
 -- get
 -- (
 -- )
 -- ;
 -- newline
 -- }
 -- while
 -- (
 -- currChar
 -- ==
 -- \
 -- )
 -- ;
 -- newline
 -- }
 -- newline
 -- }
 -- ;
 -- newline
 -- newline
 -- ConsumeState
 -- ::
 -- ConsumeState
 -- (
 -- )
 -- newline
 -- {
 -- newline
 -- static
 -- bool
 -- first
 -- =
 -- true
 -- ;
 -- newline
 -- if
 -- (
 -- first
 -- )
 -- newline
 -- {
 -- newline
 -- first
 -- =
 -- false
 -- ;
 -- newline
 -- _
 -- pEatAlphanum
 -- =
 -- new
 -- EatAlphanum
 -- (
 -- )
 -- ;
 -- newline
 -- _
 -- pEatCComment
 -- =
 -- new
 -- EatCComment
 -- (
 -- )
 -- ;
 -- newline
 -- _
 -- pEatCppComment
 -- =
 -- new
 -- EatCppComment
 -- (
 -- )
 -- ;
 -- newline
 -- _
 -- pEatPunctuator
 -- =
 -- new
 -- EatPunctuator
 -- (
 -- )
 -- ;
 -- newline
 -- _
 -- pEatWhitespace
 -- =
 -- new
 -- EatWhitespace
 -- (
 -- )
 -- ;
 -- newline
 -- _
 -- pEatQuotes
 -- =
 -- new
 -- EatQuotes
 -- (
 -- )
 -- ;
 -- newline
 -- _
 -- pEatNewline
 -- =
 -- new
 -- EatNewline
 -- (
 -- )
 -- ;
 -- newline
 -- _
 -- pEatSpecialChar
 -- =
 -- new
 -- EatSpecialChar
 -- (
 -- )
 -- ;
 -- newline
 -- _
 -- pState
 -- =
 -- _
 -- pEatWhitespace
 -- ;
 -- newline
 -- }
 -- newline
 -- }
 -- newline
 -- newline
 -- //----< test stub >--------------------------------------------------
 -- newline
 -- newline
 -- #
 -- ifdef
 -- TEST
 -- _
 -- TOKENIZER
 -- newline
 -- #
 -- include
 -- <
 -- fstream
 -- >
 -- newline
 -- newline
 -- int
 -- main
 -- (
 -- int
 -- argc
 -- ,
 -- char
 -- *
 -- *
 -- argv
 -- )
 -- newline
 -- {
 -- newline
 -- freopen
 -- (
 -- myfile.txt
 -- ,
 -- w
 -- ,
 -- stdout
 -- )
 -- ;
 -- newline
 -- std
 -- ::
 -- string
 -- fileSpec
 -- =
 -- ../Tokenizer/Tokenizer.cpp
 -- ;
 -- newline
 -- //std::string fileSpec = "../Tokenizer/test.txt";
 -- newline
 -- std
 -- ::
 -- ifstream
 -- in
 -- (
 -- fileSpec
 -- )
 -- ;
 -- newline
 -- if
 -- (
 -- !
 -- in
 -- .
 -- good
 -- (
 -- )
 -- )
 -- newline
 -- {
 -- newline
 -- std
 -- ::
 -- cout
 -- <<
 -- \n  can't open 
 -- <<
 -- fileSpec
 -- <<
 -- \n\n
 -- ;
 -- newline
 -- return
 -- 1
 -- ;
 -- newline
 -- }
 -- newline
 -- Toker
 -- toker
 -- ;
 -- newline
 -- toker
 -- .
 -- attach
 -- (
 -- &
 -- in
 -- )
 -- ;
 -- newline
 -- newline
 -- if
 -- (
 -- argc
 -- >
 -- 1
 -- )
 -- newline
 -- toker
 -- .
 -- setComments
 -- (
 -- argv
 -- [
 -- 1
 -- ]
 -- )
 -- ;
 -- newline
 -- while
 -- (
 -- in
 -- .
 -- good
 -- (
 -- )
 -- )
 -- newline
 -- {
 -- newline
 -- std
 -- ::
 -- string
 -- tok
 -- =
 -- toker
 -- .
 -- getTok
 -- (
 -- )
 -- ;
 -- newline
 -- if
 -- (
 -- tok
 -- ==
 -- \n
 -- )
 -- newline
 -- tok
 -- =
 -- newline
 -- ;
 -- newline
 -- std
 -- ::
 -- cout
 -- <<
 -- \n -- 
 -- <<
 -- tok
 -- ;
 -- newline
 -- }
 -- newline
 -- std
 -- ::
 -- cout
 -- <<
 -- \n\n
 -- ;
 -- newline
 -- return
 -- 0
 -- ;
 -- newline
 -- }
 -- newline
 -- #
 -- endif

