
  -- semiExpression --
  # define _ CRT _ SECURE _ NO _ DEPRECATE 

  -- semiExpression --
  # define NO _ WARN _ MBCS _ MFC _ DEPRECATION 

  -- semiExpression --
  # include Tokenizer.h 

  -- semiExpression --
  # include < iostream > 

  -- semiExpression --
  # include < cctype > 

  -- semiExpression --
  # include < string > 

  -- semiExpression --
  # include < map > 

  -- semiExpression --
  namespace Scanner { 

  -- semiExpression --
  class ConsumeState { 

  -- semiExpression --
  public : 

  -- semiExpression --
  ConsumeState ( ) ; 

  -- semiExpression --
  virtual ~ ConsumeState ( ) ; 

  -- semiExpression --
  ConsumeState ( const ConsumeState & ) = delete ; 

  -- semiExpression --
  ConsumeState & operator = ( const ConsumeState & ) = delete ; 

  -- semiExpression --
  void attach ( std :: istream * pIn ) { 

  -- semiExpression --
  _ pIn = pIn ; 

  -- semiExpression --
  } 

  -- semiExpression --
  virtual void eatChars ( ) = 0 ; 

  -- semiExpression --
  void consumeChars ( ) { 

  -- semiExpression --
  _ pState - > eatChars ( ) ; 

  -- semiExpression --
  _ pState = nextState ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  bool canRead ( ) { 

  -- semiExpression --
  return _ pIn - > good ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  std :: string getTok ( ) { 

  -- semiExpression --
  return token ; 

  -- semiExpression --
  } 

  -- semiExpression --
  bool hasTok ( ) { 

  -- semiExpression --
  return token . size ( ) > 0 ; 

  -- semiExpression --
  } 

  -- semiExpression --
  ConsumeState * nextState ( ) ; 

  -- semiExpression --
  bool getComments ( ) { 

  -- semiExpression --
  return _ takeComments ; 

  -- semiExpression --
  } 

  -- semiExpression --
  void setComments ( bool value ) { 

  -- semiExpression --
  _ takeComments = value ; 

  -- semiExpression --
  } 

  -- semiExpression --
  int isSpecialChar ( ) ; 

  -- semiExpression --
  void setSpecialSingleChars ( std :: string ssc , bool appendFlag = true ) ; 

  -- semiExpression --
  void setSpecialCharPairs ( std :: string scp , bool appendFlag = true ) ; 

  -- semiExpression --
  protected : 

  -- semiExpression --
  static std :: string token ; 

  -- semiExpression --
  static std :: istream * _ pIn ; 

  -- semiExpression --
  static int prevChar ; 

  -- semiExpression --
  static int currChar ; 

  -- semiExpression --
  static ConsumeState * _ pState ; 

  -- semiExpression --
  static ConsumeState * _ pEatCppComment ; 

  -- semiExpression --
  static ConsumeState * _ pEatCComment ; 

  -- semiExpression --
  static ConsumeState * _ pEatWhitespace ; 

  -- semiExpression --
  static ConsumeState * _ pEatPunctuator ; 

  -- semiExpression --
  static ConsumeState * _ pEatAlphanum ; 

  -- semiExpression --
  static ConsumeState * _ pEatNewline ; 

  -- semiExpression --
  static ConsumeState * _ pEatSpecialChar ; 

  -- semiExpression --
  static ConsumeState * _ pEatQuotes ; 

  -- semiExpression --
  static bool _ takeComments ; 

  -- semiExpression --
  static std :: map < std :: string , int > specialChars ; 

  -- semiExpression --
  } 

  -- semiExpression --
  ; 

  -- semiExpression --
  } 

  -- semiExpression --
  using namespace Scanner ; 

  -- semiExpression --
  std :: string ConsumeState :: token ; 

  -- semiExpression --
  std :: istream * ConsumeState :: _ pIn ; 

  -- semiExpression --
  int ConsumeState :: prevChar ; 

  -- semiExpression --
  int ConsumeState :: currChar ; 

  -- semiExpression --
  bool ConsumeState :: _ takeComments = false ; 

  -- semiExpression --
  std :: map < std :: string , int > ConsumeState :: specialChars = { 

  -- semiExpression --
  { 

  -- semiExpression --
  [ , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  ] , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  { 

  -- semiExpression --
  , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  } 

  -- semiExpression --
  , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  ( , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  ) , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  < , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  + , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  = , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  - , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  > , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  : , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  ; 

  -- semiExpression --
  , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  \n , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  << , 2 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  >> , 2 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  += , 2 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  == , 2 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  * , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  -= , 2 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  *= , 2 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  /= , 2 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  :: , 2 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  / , 1 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  \n , 2 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  ++ , 2 } 

  -- semiExpression --
  , { 

  -- semiExpression --
  -- , 2 } 

  -- semiExpression --
  } 

  -- semiExpression --
  ; 

  -- semiExpression --
  ConsumeState * ConsumeState :: _ pState = nullptr ; 

  -- semiExpression --
  ConsumeState * ConsumeState :: _ pEatCppComment = nullptr ; 

  -- semiExpression --
  ConsumeState * ConsumeState :: _ pEatCComment = nullptr ; 

  -- semiExpression --
  ConsumeState * ConsumeState :: _ pEatWhitespace = nullptr ; 

  -- semiExpression --
  ConsumeState * ConsumeState :: _ pEatPunctuator = nullptr ; 

  -- semiExpression --
  ConsumeState * ConsumeState :: _ pEatAlphanum = nullptr ; 

  -- semiExpression --
  ConsumeState * ConsumeState :: _ pEatQuotes = nullptr ; 

  -- semiExpression --
  ConsumeState * ConsumeState :: _ pEatSpecialChar = nullptr ; 

  -- semiExpression --
  ConsumeState * ConsumeState :: _ pEatNewline ; 

  -- semiExpression --
  void testLog ( const std :: string & msg ) ; 

  -- semiExpression --
  int ConsumeState :: isSpecialChar ( ) { 

  -- semiExpression --
  std :: string tkn = ; 

  -- semiExpression --
  tkn += currChar ; 

  -- semiExpression --
  tkn += _ pIn - > peek ( ) ; 

  -- semiExpression --
  if ( specialChars . count ( tkn ) > 0 ) return 2 ; 

  -- semiExpression --
  tkn = ; 

  -- semiExpression --
  tkn += currChar ; 

  -- semiExpression --
  if ( specialChars . count ( tkn ) > 0 ) return 1 ; 

  -- semiExpression --
  return 0 ; 

  -- semiExpression --
  } 

  -- semiExpression --
  ConsumeState * ConsumeState :: nextState ( ) { 

  -- semiExpression --
  if ( ! ( _ pIn - > good ( ) ) ) return nullptr ; 

  -- semiExpression --
  int chNext = _ pIn - > peek ( ) ; 

  -- semiExpression --
  if ( chNext == EOF ) { 

  -- semiExpression --
  _ pIn - > clear ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  if ( std :: isspace ( currChar ) && currChar ! = \n ) { 

  -- semiExpression --
  testLog ( state: eatWhitespace ) ; 

  -- semiExpression --
  return _ pEatWhitespace ; 

  -- semiExpression --
  } 

  -- semiExpression --
  if ( currChar == " || currChar == ' ) { 

  -- semiExpression --
  testLog ( state: EatQuotes ) ; 

  -- semiExpression --
  return _ pEatQuotes ; 

  -- semiExpression --
  } 

  -- semiExpression --
  if ( isSpecialChar ( ) ! = 0 && ( ! ( currChar == / && chNext == / ) ) && ( ! ( currChar == / && chNext == * ) ) ) { 

  -- semiExpression --
  testLog ( state: eatSpecialCharacters ) ; 

  -- semiExpression --
  return _ pEatSpecialChar ; 

  -- semiExpression --
  } 

  -- semiExpression --
  if ( currChar == / && chNext == / ) { 

  -- semiExpression --
  testLog ( state: eatCppComment ) ; 

  -- semiExpression --
  return _ pEatCppComment ; 

  -- semiExpression --
  } 

  -- semiExpression --
  if ( currChar == / && chNext == * ) { 

  -- semiExpression --
  testLog ( state: eatCComment ) ; 

  -- semiExpression --
  return _ pEatCComment ; 

  -- semiExpression --
  } 

  -- semiExpression --
  if ( currChar == \n ) { 

  -- semiExpression --
  testLog ( state: eatNewLine ) ; 

  -- semiExpression --
  return _ pEatNewline ; 

  -- semiExpression --
  } 

  -- semiExpression --
  if ( std :: isalnum ( currChar ) ) { 

  -- semiExpression --
  testLog ( state: eatAlphanum ) ; 

  -- semiExpression --
  return _ pEatAlphanum ; 

  -- semiExpression --
  } 

  -- semiExpression --
  if ( ispunct ( currChar ) ) { 

  -- semiExpression --
  testLog ( state: eatPunctuator ) ; 

  -- semiExpression --
  return _ pEatPunctuator ; 

  -- semiExpression --
  } 

  -- semiExpression --
  if ( !_ pIn - > good ( ) ) return _ pEatWhitespace ; 

  -- semiExpression --
  throw ( std :: logic _ error ( invalid type ) ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  class EatWhitespace : public ConsumeState { 

  -- semiExpression --
  public : 

  -- semiExpression --
  virtual void eatChars ( ) { 

  -- semiExpression --
  token . clear ( ) ; 

  -- semiExpression --
  do { 

  -- semiExpression --
  if ( !_ pIn - > good ( ) ) return ; 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  while ( std :: isspace ( currChar ) && currChar ! = \n ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  ; 

  -- semiExpression --
  class EatCppComment : public ConsumeState { 

  -- semiExpression --
  public : 

  -- semiExpression --
  virtual void eatChars ( ) { 

  -- semiExpression --
  token . clear ( ) ; 

  -- semiExpression --
  do { 

  -- semiExpression --
  token += currChar ; 

  -- semiExpression --
  if ( !_ pIn - > good ( ) ) return ; 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  while ( currChar ! = \n ) ; 

  -- semiExpression --
  if ( ! getComments ( ) ) token . clear ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  ; 

  -- semiExpression --
  class EatCComment : public ConsumeState { 

  -- semiExpression --
  public : 

  -- semiExpression --
  virtual void eatChars ( ) { 

  -- semiExpression --
  token . clear ( ) ; 

  -- semiExpression --
  do { 

  -- semiExpression --
  token += currChar ; 

  -- semiExpression --
  if ( !_ pIn - > good ( ) ) return ; 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  while ( currChar ! = * || _ pIn - > peek ( ) ! = / ) ; 

  -- semiExpression --
  token += currChar ; 

  -- semiExpression --
  token += _ pIn - > get ( ) ; 

  -- semiExpression --
  if ( ! getComments ( ) ) token . clear ( ) ; 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  ; 

  -- semiExpression --
  class EatPunctuator : public ConsumeState { 

  -- semiExpression --
  public : 

  -- semiExpression --
  virtual void eatChars ( ) { 

  -- semiExpression --
  token . clear ( ) ; 

  -- semiExpression --
  do { 

  -- semiExpression --
  token += currChar ; 

  -- semiExpression --
  if ( !_ pIn - > good ( ) ) return ; 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  while ( ispunct ( currChar ) && currChar ! = " && currChar ! = ' && ! isSpecialChar ( ) ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  ; 

  -- semiExpression --
  class EatSpecialChar : public ConsumeState { 

  -- semiExpression --
  public : 

  -- semiExpression --
  virtual void eatChars ( ) { 

  -- semiExpression --
  token . clear ( ) ; 

  -- semiExpression --
  int token _ size = isSpecialChar ( ) ; 

  -- semiExpression --
  if ( token _ size == 1 ) token += currChar ; 

  -- semiExpression --
  else if ( token _ size == 2 ) { 

  -- semiExpression --
  token += currChar ; 

  -- semiExpression --
  token += _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  if ( _ pIn - > good ( ) ) currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  ; 

  -- semiExpression --
  class EatAlphanum : public ConsumeState { 

  -- semiExpression --
  public : 

  -- semiExpression --
  virtual void eatChars ( ) { 

  -- semiExpression --
  token . clear ( ) ; 

  -- semiExpression --
  do { 

  -- semiExpression --
  token += currChar ; 

  -- semiExpression --
  if ( !_ pIn - > good ( ) ) return ; 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  while ( isalnum ( currChar ) ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  ; 

  -- semiExpression --
  class EatNewline : public ConsumeState { 

  -- semiExpression --
  public : 

  -- semiExpression --
  virtual void eatChars ( ) { 

  -- semiExpression --
  token . clear ( ) ; 

  -- semiExpression --
  token += currChar ; 

  -- semiExpression --
  if ( !_ pIn - > good ( ) ) return ; 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  ; 

  -- semiExpression --
  ConsumeState :: ~ ConsumeState ( ) { 

  -- semiExpression --
  static bool first = true ; 

  -- semiExpression --
  if ( first ) { 

  -- semiExpression --
  first = false ; 

  -- semiExpression --
  delete _ pEatAlphanum ; 

  -- semiExpression --
  delete _ pEatCComment ; 

  -- semiExpression --
  delete _ pEatCppComment ; 

  -- semiExpression --
  delete _ pEatPunctuator ; 

  -- semiExpression --
  delete _ pEatWhitespace ; 

  -- semiExpression --
  delete _ pEatNewline ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  Toker :: Toker ( ) : pConsumer ( new EatWhitespace ( ) ) { 

  -- semiExpression --
  } 

  -- semiExpression --
  Toker :: ~ Toker ( ) { 

  -- semiExpression --
  delete pConsumer ; 

  -- semiExpression --
  } 

  -- semiExpression --
  bool Toker :: attach ( std :: istream * pIn ) { 

  -- semiExpression --
  if ( pIn ! = nullptr && pIn - > good ( ) ) { 

  -- semiExpression --
  pConsumer - > attach ( pIn ) ; 

  -- semiExpression --
  return true ; 

  -- semiExpression --
  } 

  -- semiExpression --
  return false ; 

  -- semiExpression --
  } 

  -- semiExpression --
  std :: string Toker :: getTok ( ) { 

  -- semiExpression --
  while ( true ) { 

  -- semiExpression --
  if ( ! pConsumer - > canRead ( ) ) return ; 

  -- semiExpression --
  pConsumer - > consumeChars ( ) ; 

  -- semiExpression --
  if ( pConsumer - > hasTok ( ) ) break ; 

  -- semiExpression --
  } 

  -- semiExpression --
  return pConsumer - > getTok ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  bool Toker :: canRead ( ) { 

  -- semiExpression --
  return pConsumer - > canRead ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  void Toker :: setComments ( const std :: string value ) { 

  -- semiExpression --
  std :: cout << called ; 

  -- semiExpression --
  if ( value == true ) pConsumer - > setComments ( true ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  void Scanner :: ConsumeState :: setSpecialSingleChars ( std :: string ssc , bool appendFlag ) { 

  -- semiExpression --
  if ( ! appendFlag ) { 

  -- semiExpression --
  std :: map < std :: string , int > :: iterator it ; 

  -- semiExpression --
  for ( it = specialChars . begin ( ) ; it ! = specialChars . end ( ) ; it ++ ) if ( it - > second == 1 ) specialChars . erase ( it ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  std :: string :: size _ type i = 0 ; 

  -- semiExpression --
  std :: string :: size _ type j = ssc . find ( , ) ; 

  -- semiExpression --
  while ( j ! = std :: string :: npos ) { 

  -- semiExpression --
  specialChars [ ssc . substr ( i , j - i ) ] = 1 ; 

  -- semiExpression --
  i = ++ j ; 

  -- semiExpression --
  j = ssc . find ( , , j ) ; 

  -- semiExpression --
  if ( j == std :: string :: npos ) specialChars [ ssc . substr ( i , ssc . length ( ) ) ] = 1 ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  void Scanner :: ConsumeState :: setSpecialCharPairs ( std :: string scp , bool appendFlag ) { 

  -- semiExpression --
  if ( ! appendFlag ) { 

  -- semiExpression --
  std :: map < std :: string , int > :: iterator it ; 

  -- semiExpression --
  for ( it = specialChars . begin ( ) ; it ! = specialChars . end ( ) ; it ++ ) if ( it - > second == 2 ) specialChars . erase ( it ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  std :: string :: size _ type i = 0 ; 

  -- semiExpression --
  std :: string :: size _ type j = scp . find ( , ) ; 

  -- semiExpression --
  while ( j ! = std :: string :: npos ) { 

  -- semiExpression --
  specialChars [ scp . substr ( i , j - i ) ] = 2 ; 

  -- semiExpression --
  i = ++ j ; 

  -- semiExpression --
  j = scp . find ( , , j ) ; 

  -- semiExpression --
  if ( j == std :: string :: npos ) specialChars [ scp . substr ( i , scp . length ( ) ) ] = 2 ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  void testLog ( const std :: string & msg ) { 

  -- semiExpression --
  # ifdef TEST _ LOG 

  -- semiExpression --
  std :: cout << \n   << msg ; 

  -- semiExpression --
  # endif 

  -- semiExpression --
  } 

  -- semiExpression --
  class EatQuotes : public ConsumeState { 

  -- semiExpression --
  public : 

  -- semiExpression --
  virtual void eatChars ( ) { 

  -- semiExpression --
  token . clear ( ) ; 

  -- semiExpression --
  int startChar ; 

  -- semiExpression --
  bool escapeChar = true ; 

  -- semiExpression --
  startChar = currChar ; 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  if ( currChar == startChar ) { 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  return ; 

  -- semiExpression --
  } 

  -- semiExpression --
  do { 

  -- semiExpression --
  escapeChar = true ; 

  -- semiExpression --
  if ( currChar == \ ) eatescapeChars ( escapeChar ) ; 

  -- semiExpression --
  if ( currChar == startChar && escapeChar ) { 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  return ; 

  -- semiExpression --
  } 

  -- semiExpression --
  token += currChar ; 

  -- semiExpression --
  if ( !_ pIn - > good ( ) ) return ; 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  while ( ! ( currChar == startChar && escapeChar ) ) ; 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  void eatescapeChars ( bool & escapeChar ) { 

  -- semiExpression --
  do { 

  -- semiExpression --
  if ( ! ( _ pIn - > peek ( ) == " || _ pIn - > peek ( ) == ' ) ) token += currChar ; 

  -- semiExpression --
  escapeChar = ! escapeChar ; 

  -- semiExpression --
  currChar = _ pIn - > get ( ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  while ( currChar == \ ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  ; 

  -- semiExpression --
  ConsumeState :: ConsumeState ( ) { 

  -- semiExpression --
  static bool first = true ; 

  -- semiExpression --
  if ( first ) { 

  -- semiExpression --
  first = false ; 

  -- semiExpression --
  _ pEatAlphanum = new EatAlphanum ( ) ; 

  -- semiExpression --
  _ pEatCComment = new EatCComment ( ) ; 

  -- semiExpression --
  _ pEatCppComment = new EatCppComment ( ) ; 

  -- semiExpression --
  _ pEatPunctuator = new EatPunctuator ( ) ; 

  -- semiExpression --
  _ pEatWhitespace = new EatWhitespace ( ) ; 

  -- semiExpression --
  _ pEatQuotes = new EatQuotes ( ) ; 

  -- semiExpression --
  _ pEatNewline = new EatNewline ( ) ; 

  -- semiExpression --
  _ pEatSpecialChar = new EatSpecialChar ( ) ; 

  -- semiExpression --
  _ pState = _ pEatWhitespace ; 

  -- semiExpression --
  } 

  -- semiExpression --
  } 

  -- semiExpression --
  # ifdef TEST _ TOKENIZER 

  -- semiExpression --
  # include < fstream > 

  -- semiExpression --
  int main ( int argc , char * * argv ) { 

  -- semiExpression --
  freopen ( tokenizer_out.txt , w , stdout ) ; 

  -- semiExpression --
  std :: string fileSpec = ../Tokenizer/test.txt ; 

  -- semiExpression --
  std :: ifstream in ( fileSpec ) ; 

  -- semiExpression --
  if ( ! in . good ( ) ) { 

  -- semiExpression --
  std :: cout << \n  can't open  << fileSpec << \n\n ; 

  -- semiExpression --
  return 1 ; 

  -- semiExpression --
  } 

  -- semiExpression --
  Toker toker ; 

  -- semiExpression --
  toker . attach ( & in ) ; 

  -- semiExpression --
  if ( argc > 1 ) toker . setComments ( argv [ 1 ] ) ; 

  -- semiExpression --
  while ( in . good ( ) ) { 

  -- semiExpression --
  std :: string tok = toker . getTok ( ) ; 

  -- semiExpression --
  if ( tok == \n ) tok = newline ; 

  -- semiExpression --
  std :: cout << \n --  << tok ; 

  -- semiExpression --
  } 

  -- semiExpression --
  std :: cout << \n\n ; 

  -- semiExpression --
  return 0 ; 

  -- semiExpression --
  for ( int i = 0 ; i < 10 ; i ++ ) ; 

  -- semiExpression --
  } 

  -- semiExpression --
  # endif 


